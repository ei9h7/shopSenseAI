import React, { useState } from 'react'
import { ClipboardList, Plus, Download, Eye, Wrench, Clock, AlertTriangle, X, Bot, FileText, FilePdf } from 'lucide-react'
import { useTechSheets } from '../hooks/useTechSheets'
import { useBusinessSettings } from '../hooks/useBusinessSettings'
import toast from 'react-hot-toast'

/**
 * TechSheets Component
 * 
 * Manages technical repair guides with both auto-generation from bookings
 * and manual generation from job descriptions. Features include:
 * 
 * - Manual tech sheet generation via AI from job descriptions
 * - Auto-generated sheets from accepted quotes/bookings
 * - Fallback tech sheets when AI is unavailable
 * - Professional branded PDF generation for workshop use
 * - Difficulty ratings and time estimates
 * - Safety warnings and tool requirements
 * - Step-by-step repair instructions
 * - Professional tips and best practices
 */
const TechSheets: React.FC = () => {
  const { 
    techSheets, 
    isLoading, 
    generateTechSheet, 
    isGenerating, 
    canGenerateTechSheets, 
    hasAIGeneration,
    downloadTechSheetPDF
  } = useTechSheets()
  const { settings, serverSettings } = useBusinessSettings()
  const [showGenerateForm, setShowGenerateForm] = useState(false)
  const [selectedSheet, setSelectedSheet] = useState<any>(null)
  const [jobDescription, setJobDescription] = useState('')

  /**
   * Generates a tech sheet using AI based on job description
   * 
   * This function sends the job description to OpenAI to generate
   * a comprehensive technical repair guide with all necessary details.
   */
  const handleGenerateTechSheet = async () => {
    if (!jobDescription.trim()) {
      toast.error('Please enter a job description')
      return
    }

    try {
      const result = await generateTechSheet(jobDescription.trim())
      if (result) {
        setJobDescription('')
        setShowGenerateForm(false)
      }
    } catch (error) {
      console.error('Error in handleGenerateTechSheet:', error)
    }
  }

  /**
   * Downloads a tech sheet as a legacy text file (for compatibility)
   */
  const downloadTechSheetText = (sheet: any) => {
    const content = `
TECH SHEET: ${sheet.title}
Generated: ${new Date(sheet.created_at).toLocaleDateString()}
Estimated Time: ${sheet.estimated_time} hours
Difficulty: ${sheet.difficulty}
Generated by: ${sheet.generated_by === 'ai' ? 'AI Assistant' : 'Manual Template'}

DESCRIPTION:
${sheet.description}

TOOLS REQUIRED:
${sheet.tools_required.map((tool: string) => `• ${tool}`).join('\n')}

PARTS NEEDED:
${sheet.parts_needed.map((part: string) => `• ${part}`).join('\n')}

SAFETY WARNINGS:
${sheet.safety_warnings.map((warning: string) => `⚠️ ${warning}`).join('\n')}

STEP-BY-STEP INSTRUCTIONS:
${sheet.step_by_step.map((step: string, index: number) => `${index + 1}. ${step}`).join('\n')}

TIPS & BEST PRACTICES:
${sheet.tips.map((tip: string) => `💡 ${tip}`).join('\n')}

---
Generated by ShopSenseAI
Built with Bolt.new
    `.trim()

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${sheet.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_tech_sheet.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    
    toast.success('Text tech sheet downloaded!')
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Easy': return 'bg-green-100 text-green-800'
      case 'Medium': return 'bg-yellow-100 text-yellow-800'
      case 'Hard': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Tech Sheets</h1>
          <p className="mt-1 text-sm text-gray-500">
            AI-generated technical guides for repair jobs with professional PDF output
          </p>
        </div>
        <button
          onClick={() => setShowGenerateForm(true)}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          <Plus className="h-4 w-4 mr-2" />
          Generate Tech Sheet
        </button>
      </div>

      {/* PDF Generation Notice */}
      <div className="bg-gradient-to-r from-primary-50 to-pink-50 border border-primary-200 rounded-md p-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <FilePdf className="h-5 w-5 text-primary-600" />
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-primary-800">
              Professional PDF Tech Sheets
            </h3>
            <div className="mt-2 text-sm text-primary-700">
              <p>
                Tech sheets are now generated as professional, branded PDFs with ShopSenseAI styling, 
                safety warnings, step-by-step instructions, and workshop-ready formatting.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* AI Status Notice */}
      {!hasAIGeneration() && (
        <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <FileText className="h-5 w-5 text-blue-400" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-blue-800">
                Basic Tech Sheet Generation Available
              </h3>
              <div className="mt-2 text-sm text-blue-700">
                <p>
                  Tech sheets will be created using professional templates. 
                  Configure OpenAI API key in Settings for AI-powered generation with detailed instructions.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {hasAIGeneration() && (
        <div className="bg-green-50 border border-green-200 rounded-md p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <Bot className="h-5 w-5 text-green-400" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-green-800">
                AI-Powered Tech Sheet Generation Enabled
              </h3>
              <div className="mt-2 text-sm text-green-700">
                <p>
                  Tech sheets will be generated using AI with detailed, job-specific instructions and professional guidance.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Generate Form Modal */}
      {showGenerateForm && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">Generate Tech Sheet</h3>
                <button
                  onClick={() => {
                    setShowGenerateForm(false)
                    setJobDescription('')
                  }}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Job Description
                  </label>
                  <textarea
                    value={jobDescription}
                    onChange={(e) => setJobDescription(e.target.value)}
                    placeholder="Describe the repair job (e.g., 'Replace brake pads on 2018 Honda Civic front wheels')"
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  />
                  <p className="mt-1 text-xs text-gray-500">
                    Be specific about the vehicle, parts, and repair needed for best results
                  </p>
                </div>
                
                {/* AI Status in Modal */}
                <div className={`p-3 rounded-md ${hasAIGeneration() ? 'bg-green-50 border border-green-200' : 'bg-blue-50 border border-blue-200'}`}>
                  <div className="flex items-center">
                    {hasAIGeneration() ? (
                      <Bot className="h-4 w-4 text-green-600 mr-2" />
                    ) : (
                      <FileText className="h-4 w-4 text-blue-600 mr-2" />
                    )}
                    <p className={`text-sm ${hasAIGeneration() ? 'text-green-800' : 'text-blue-800'}`}>
                      {hasAIGeneration() 
                        ? 'AI will generate detailed, job-specific instructions'
                        : 'Professional template will be used (configure OpenAI for AI generation)'
                      }
                    </p>
                  </div>
                </div>

                {/* PDF Notice */}
                <div className="p-3 rounded-md bg-primary-50 border border-primary-200">
                  <div className="flex items-center">
                    <FilePdf className="h-4 w-4 text-primary-600 mr-2" />
                    <p className="text-sm text-primary-800">
                      Tech sheet will be generated as a professional, branded PDF
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end space-x-2 mt-6">
                <button
                  onClick={() => {
                    setShowGenerateForm(false)
                    setJobDescription('')
                  }}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleGenerateTechSheet}
                  disabled={!jobDescription.trim() || isGenerating}
                  className="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isGenerating ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                      Generating...
                    </>
                  ) : (
                    <>
                      <Wrench className="h-4 w-4 mr-2 inline-block" />
                      Generate
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Tech Sheets List */}
      <div className="bg-white shadow rounded-lg">
        <div className="px-4 py-5 sm:p-6">
          {techSheets.length === 0 ? (
            <div className="text-center py-12">
              <ClipboardList className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">No tech sheets yet</h3>
              <p className="mt-1 text-sm text-gray-500">
                Generate your first tech sheet by describing a repair job above.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {techSheets.map((sheet) => (
                <div key={sheet.id} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <h4 className="text-lg font-medium text-gray-900">{sheet.title}</h4>
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getDifficultyColor(sheet.difficulty)}`}>
                          {sheet.difficulty}
                        </span>
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          <Clock className="h-3 w-3 mr-1" />
                          {sheet.estimated_time}h
                        </span>
                        {sheet.generated_by === 'ai' ? (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                            <Bot className="h-3 w-3 mr-1" />
                            AI Generated
                          </span>
                        ) : (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            <FileText className="h-3 w-3 mr-1" />
                            Template
                          </span>
                        )}
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{sheet.description}</p>
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <span>{sheet.tools_required.length} tools</span>
                        <span>{sheet.parts_needed.length} parts</span>
                        <span>{sheet.step_by_step.length} steps</span>
                        <span>Created: {new Date(sheet.created_at).toLocaleDateString()}</span>
                      </div>
                      {sheet.safety_warnings.length > 0 && (
                        <div className="mt-2 flex items-center text-sm text-amber-600">
                          <AlertTriangle className="h-4 w-4 mr-1" />
                          {sheet.safety_warnings.length} safety warning{sheet.safety_warnings.length !== 1 ? 's' : ''}
                        </div>
                      )}
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setSelectedSheet(sheet)}
                        className="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        View
                      </button>
                      <button
                        onClick={() => downloadTechSheetPDF(sheet)}
                        className="inline-flex items-center px-3 py-1 border border-transparent rounded-md text-sm font-medium text-white bg-primary-600 hover:bg-primary-700"
                      >
                        <FilePdf className="h-4 w-4 mr-1" />
                        PDF
                      </button>
                      <button
                        onClick={() => downloadTechSheetText(sheet)}
                        className="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                      >
                        <Download className="h-4 w-4 mr-1" />
                        Text
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Tech Sheet Detail Modal */}
      {selectedSheet && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border max-w-4xl shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-medium text-gray-900">{selectedSheet.title}</h3>
                <button
                  onClick={() => setSelectedSheet(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-6 w-6" />
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Left Column */}
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Job Description</h4>
                    <p className="text-sm text-gray-700">{selectedSheet.description}</p>
                  </div>
                  
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Tools Required</h4>
                    <ul className="text-sm text-gray-700 space-y-1">
                      {selectedSheet.tools_required.map((tool: string, index: number) => (
                        <li key={index} className="flex items-center">
                          <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                          {tool}
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Parts Needed</h4>
                    <ul className="text-sm text-gray-700 space-y-1">
                      {selectedSheet.parts_needed.map((part: string, index: number) => (
                        <li key={index} className="flex items-center">
                          <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                          {part}
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  {selectedSheet.safety_warnings.length > 0 && (
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2 flex items-center">
                        <AlertTriangle className="h-4 w-4 mr-1 text-amber-500" />
                        Safety Warnings
                      </h4>
                      <ul className="text-sm text-amber-700 space-y-1">
                        {selectedSheet.safety_warnings.map((warning: string, index: number) => (
                          <li key={index} className="flex items-start">
                            <span className="text-amber-500 mr-2">⚠️</span>
                            {warning}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
                
                {/* Right Column */}
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Step-by-Step Instructions</h4>
                    <ol className="text-sm text-gray-700 space-y-2">
                      {selectedSheet.step_by_step.map((step: string, index: number) => (
                        <li key={index} className="flex items-start">
                          <span className="inline-flex items-center justify-center w-6 h-6 bg-primary-100 text-primary-600 rounded-full text-xs font-medium mr-3 mt-0.5 flex-shrink-0">
                            {index + 1}
                          </span>
                          {step}
                        </li>
                      ))}
                    </ol>
                  </div>
                  
                  {selectedSheet.tips.length > 0 && (
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2">Tips & Best Practices</h4>
                      <ul className="text-sm text-gray-700 space-y-1">
                        {selectedSheet.tips.map((tip: string, index: number) => (
                          <li key={index} className="flex items-start">
                            <span className="text-blue-500 mr-2">💡</span>
                            {tip}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  <div className="bg-gray-50 p-3 rounded-md">
                    <div className="text-sm text-gray-600">
                      <div className="flex justify-between items-center mb-1">
                        <span>Estimated Time:</span>
                        <span className="font-medium">{selectedSheet.estimated_time} hours</span>
                      </div>
                      <div className="flex justify-between items-center mb-1">
                        <span>Difficulty:</span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(selectedSheet.difficulty)}`}>
                          {selectedSheet.difficulty}
                        </span>
                      </div>
                      <div className="flex justify-between items-center mb-1">
                        <span>Generated by:</span>
                        <span className="flex items-center">
                          {selectedSheet.generated_by === 'ai' ? (
                            <>
                              <Bot className="h-3 w-3 mr-1 text-purple-600" />
                              AI Assistant
                            </>
                          ) : (
                            <>
                              <FileText className="h-3 w-3 mr-1 text-gray-600" />
                              Template
                            </>
                          )}
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span>Created:</span>
                        <span>{new Date(selectedSheet.created_at).toLocaleDateString()}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end space-x-2 mt-6">
                <button
                  onClick={() => downloadTechSheetPDF(selectedSheet)}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700"
                >
                  <FilePdf className="h-4 w-4 mr-2" />
                  Download PDF
                </button>
                <button
                  onClick={() => downloadTechSheetText(selectedSheet)}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download Text
                </button>
                <button
                  onClick={() => setSelectedSheet(null)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default TechSheets